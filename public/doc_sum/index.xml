<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Document Summarization on LangChain AI</title>
    <link>http://localhost:1313/langchain_project_book/doc_sum/</link>
    <description>Recent content in Document Summarization on LangChain AI</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 28 Oct 2024 21:13:34 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/langchain_project_book/doc_sum/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Software Environment</title>
      <link>http://localhost:1313/langchain_project_book/doc_sum/software_env/</link>
      <pubDate>Mon, 28 Oct 2024 20:58:01 +0800</pubDate>
      <guid>http://localhost:1313/langchain_project_book/doc_sum/software_env/</guid>
      <description>Python As LangChain, introduced in this book, is based on Python, the following is the requirements file containing the necessary libraries and modules for LangChain installation.&#xA;In my development environment, I have the following libraries installed:&#xA;Reminder: The community is evolving, and the library is adapting rapidly. The information presented here may change over time. This list serves as a reference for the current chapter being written.&#xA;beautifulsoup4 4.12.3 faiss-cpu 1.</description>
    </item>
    <item>
      <title>Setting up Vectorstore with Qdrant</title>
      <link>http://localhost:1313/langchain_project_book/doc_sum/setup_vectorstore_with_qdrant/</link>
      <pubDate>Mon, 28 Oct 2024 21:06:19 +0800</pubDate>
      <guid>http://localhost:1313/langchain_project_book/doc_sum/setup_vectorstore_with_qdrant/</guid>
      <description>A vector database is a specialized database created to transform data, typically textual data, into multi-dimensional vectors, also referred to as vector embeddings, and store them systematically. These vectors serve as mathematical representations of attributes or features. The dimensionality of each vector can vary significantly, ranging from a few dimensions to several thousand, depending on the complexity and granularity of the data.&#xA;In this book, we&amp;rsquo;re going to cover the 4 open-source vector databases: Qdrant, FAISS, Supabase and Chroma.</description>
    </item>
    <item>
      <title>Define a RAG Chain</title>
      <link>http://localhost:1313/langchain_project_book/doc_sum/define_a_rag_chain/</link>
      <pubDate>Mon, 28 Oct 2024 21:09:57 +0800</pubDate>
      <guid>http://localhost:1313/langchain_project_book/doc_sum/define_a_rag_chain/</guid>
      <description>Using PyPDFLoader and DirectoryLoader to load the multiple PDF documents from a specific directory The example provided utilizes two components:&#xA;PyPDFLoader: This tool is used to load and parse PDF documents. DirectoryLoader: This component enables the simultaneous processing of multiple PDF files from a specific directory. As an example, the following PDF document was randomly downloaded: https://ufdcimages.uflib.ufl.edu/AA/00/01/16/99/00001/WorldHistory.pdf&#xA;Copy this file to your project or any directory you like. In my case, I leave it in /tmp.</description>
    </item>
    <item>
      <title>Summary</title>
      <link>http://localhost:1313/langchain_project_book/doc_sum/summary/</link>
      <pubDate>Mon, 28 Oct 2024 21:13:34 +0800</pubDate>
      <guid>http://localhost:1313/langchain_project_book/doc_sum/summary/</guid>
      <description>This chapter covers several skills related to LangChain Retrieval Augmented Generation (RAG) with the open source LLM. Here are some of the skills you can learn from this chapter:&#xA;Run a VectorStore in Docker mode. Define a VectorStore as a query-only client. Perform a full RAG to summarize an entire document from one or more PDF files. Launch Mistral LLM with Ollama. Execute everything locally using the open source LLM, without exposing any data on internet, if you have sensitive data, such as your client and business information.</description>
    </item>
  </channel>
</rss>
